#include "CSensor.h"
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_gpio.h"
#include "stm32f4xx_hal_rcc.h"
#include "stm32f4xx_hal_i2c.h"
#include "ELowPass.h"
#include "math.h"

bool CSensor::getPhiKValues(float& phiK, float& phiK_d)
{
	bool readoutSuccess = false;
	Int16 accX1raw = 0;
	Int16 accX2raw = 0;
	Int16 accY1raw = 0;
	Int16 accY2raw = 0;
	Int16 gyrZ1raw = 0;
	if(this->getAccX1Raw(accX1raw) &&
	   this->getAccX2Raw(accX2raw) &&
	   this->getAccY1Raw(accY1raw) &&
	   this->getAccY2Raw(accY2raw) &&
	   this->getGyrZ1Raw(gyrZ1raw))
	{
		readoutSuccess = true;

		float accX1 = static_cast<float>(-accX1raw) * MPU6050::X1_ACC_P1 + MPU6050::X1_ACC_P2;
		float accX2 = static_cast<float>(-accX2raw) * MPU6050::X2_ACC_P1 + MPU6050::X2_ACC_P2;
		float accY1 = static_cast<float>(accY1raw) * MPU6050::Y1_ACC_P1 + MPU6050::Y1_ACC_P2;
		float accY2 = static_cast<float>(accY2raw) * MPU6050::Y2_ACC_P1 + MPU6050::Y2_ACC_P2;
		float gyrZ1 = (static_cast<float>(-gyrZ1raw) + MPU6050::Z1_GYRO_OFFSET) * MPU6050::Z1_GYRO_FACTOR;

		phiK_d = gyrZ1 * MPU6050::DEG_TO_RAD_FACTOR;
		phiK   = -atan2(accX1 - MPU6050::MU * accX2, accY1 - MPU6050::MU*accY2) + 0.0217F;
	}
	return readoutSuccess;
}
bool CSensor::getFilteredPhiKValues(float& phiK, float& phiK_d)
{
	bool readoutSuccess = false;
	Int16 accX1raw = 0;
	Int16 accX2raw = 0;
	Int16 accY1raw = 0;
	Int16 accY2raw = 0;
	Int16 gyrZ1raw = 0;
	if(this->getAccX1Raw(accX1raw) &&
	   this->getAccX2Raw(accX2raw) &&
	   this->getAccY1Raw(accY1raw) &&
	   this->getAccY2Raw(accY2raw) &&
	   this->getGyrZ1Raw(gyrZ1raw))
	{
		readoutSuccess = true;

		float accX1 = static_cast<float>(-accX1raw) * MPU6050::X1_ACC_P1 + MPU6050::X1_ACC_P2;
		float accX2 = static_cast<float>(-accX2raw) * MPU6050::X2_ACC_P1 + MPU6050::X2_ACC_P2;
		float accY1 = static_cast<float>(accY1raw) * MPU6050::Y1_ACC_P1 + MPU6050::Y1_ACC_P2;
		float accY2 = static_cast<float>(accY2raw) * MPU6050::Y2_ACC_P1 + MPU6050::Y2_ACC_P2;
		float gyrZ1 = (static_cast<float>(-gyrZ1raw) + MPU6050::Z1_GYRO_OFFSET) * MPU6050::Z1_GYRO_FACTOR;

		float recentPhiK   	= phiK;
		float recentPhiK_d 	= phiK_d;
		phiK_d 		  		= gyrZ1 * MPU6050::DEG_TO_RAD_FACTOR;
		float accPhiK 		= -atan2(accX1 - MPU6050::MU * accX2, accY1 - MPU6050::MU*accY2) + 0.02F;
		float phiKinc 		= 0.01*(phiK_d + recentPhiK_d);
		float phiKgyr 		= recentPhiK + phiKinc;
		phiK   		  		= 0.98F * phiKgyr + 0.02F * accPhiK;
	}
	return readoutSuccess;
}
bool CSensor::getAccX1Raw(Int16& rawValue)
{
	bool readSuccess = false;
	union
	{
		Int16 value = 0;
		UInt8 bytes[2];
	};
	if(mMPU1.readRegister(MPU6050::ACCEL_XOUT_L, bytes[0]) &&
	   mMPU1.readRegister(MPU6050::ACCEL_XOUT_H, bytes[1]))
	{
		rawValue = value;
		readSuccess = true;
	}
	return readSuccess;
}
bool CSensor::getAccY1Raw(Int16& rawValue)
{
	bool readSuccess = false;
	union
	{
		Int16 value = 0;
		UInt8 bytes[2];
	};
	if(mMPU1.readRegister(MPU6050::ACCEL_YOUT_L, bytes[0]) &&
	   mMPU1.readRegister(MPU6050::ACCEL_YOUT_H, bytes[1]))
	{
		rawValue = value;
		readSuccess = true;
	}
	return readSuccess;
}
bool CSensor::getAccX2Raw(Int16& rawValue)
{
	bool readSuccess = false;
	union
	{
		Int16 value = 0;
		UInt8 bytes[2];
	};
	if(mMPU2.readRegister(MPU6050::ACCEL_XOUT_L, bytes[0]) &&
	   mMPU2.readRegister(MPU6050::ACCEL_XOUT_H, bytes[1]))
	{
		rawValue = value;
		readSuccess = true;
	}
	return readSuccess;
}
bool CSensor::getAccY2Raw(Int16& rawValue)
{
	bool readSuccess = false;
	union
	{
		Int16 value = 0;
		UInt8 bytes[2];
	};
	if(mMPU2.readRegister(MPU6050::ACCEL_YOUT_L, bytes[0]) &&
	   mMPU2.readRegister(MPU6050::ACCEL_YOUT_H, bytes[1]))
	{
		rawValue = value;
		readSuccess = true;
	}
	return readSuccess;
}
bool CSensor::getTemperature(Int16& rawValue)
{
	bool readSuccess = false;
	union
	{
		Int16 value = 0;
		UInt8 bytes[2];
	};
	if(mMPU1.readRegister(MPU6050::TEMP_OUT_L, bytes[0]) &&
	   mMPU2.readRegister(MPU6050::TEMP_OUT_H, bytes[1]))
	{
		rawValue = value;
		readSuccess = true;
	}
	return readSuccess;
}
bool CSensor::getGyrZ1Raw(Int16& rawValue)
{
	bool readSuccess = false;
	union
	{
		Int16 value = 0;
		UInt8 bytes[2];
	};
	if(mMPU1.readRegister(MPU6050::GYRO_ZOUT_L, bytes[0]) &&
	   mMPU2.readRegister(MPU6050::GYRO_ZOUT_H, bytes[1]))
	{
		rawValue = value;
		readSuccess = true;
	}
	return readSuccess;
}
bool CSensor::getGyrZ2Raw(Int16& rawValue)
{
	bool readSuccess = false;
	union
	{
		Int16 value = 0;
		UInt8 bytes[2];
	};
	if(mMPU1.readRegister(MPU6050::GYRO_ZOUT_L, bytes[0]) &&
	   mMPU2.readRegister(MPU6050::GYRO_ZOUT_H, bytes[1]))
	{
		rawValue = value;
		readSuccess = true;
	}
	return readSuccess;
}
CSensor::CSensor(bool& initSuccess, ELowPass lpConfig) : mMPU1(false, mHandle),
					 	 	 	      	  	  	  	  	 mMPU2(true, mHandle)
{
	mHandle.Instance = I2C1;
	__HAL_RCC_GPIOB_CLK_ENABLE();
	__HAL_RCC_I2C1_CLK_ENABLE();

	GPIO_InitTypeDef initPort;
	initPort.Pin 		= GPIO_PIN_6 | GPIO_PIN_7;
	initPort.Mode 		= GPIO_MODE_AF_OD;
	initPort.Pull 		= GPIO_PULLUP;
	initPort.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
	initPort.Alternate 	= GPIO_AF4_I2C1;
	HAL_GPIO_Init(GPIOB, &initPort);

	mHandle.Init.ClockSpeed 		= 400000U;
	mHandle.Init.DutyCycle 			= I2C_DUTYCYCLE_2;
	mHandle.Init.OwnAddress2 		= 0x00U;
	mHandle.Init.OwnAddress1 		= 0x00U;
	mHandle.Init.AddressingMode 	= I2C_ADDRESSINGMODE_7BIT;
	mHandle.Init.DualAddressMode 	= I2C_DUALADDRESS_DISABLE;
	mHandle.Init.GeneralCallMode 	= I2C_GENERALCALL_DISABLE;
	mHandle.Init.NoStretchMode 		= I2C_NOSTRETCH_DISABLE;
	HAL_I2C_Init(&mHandle);

	initSuccess = mMPU1.init() && mMPU2.init();
	mMPU1.writeRegister(MPU6050::CONFIG, static_cast<UInt8>(lpConfig));
	mMPU2.writeRegister(MPU6050::CONFIG, static_cast<UInt8>(lpConfig));
}
