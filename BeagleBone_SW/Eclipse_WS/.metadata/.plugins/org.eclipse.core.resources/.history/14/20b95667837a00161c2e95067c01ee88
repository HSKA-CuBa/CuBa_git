//12.9.16, Michael Meindl
#include "CControlComponent.h"
#include <iostream>
#include <unistd.h>

CControlComponent::CControlComponent(TQueue<Config::QueueSize>& rxQueue,
									 TQueue<Config::QueueSize>& txQueue) :
									 	 AComponentBase(rxQueue, txQueue, true)
{

}
void CControlComponent::init()
{
	std::cout << "[*] Control-Component: Initializing Hardware" << std::endl;
	Int32 retVal = mHardware.initializeHardware();
	sAssertion( retVal >= 0, "(CControlComponent::init()): Failed to initialize HW.");
}
void CControlComponent::run()
{
	CMessage msg;
	Float32 time = 0.0F;
	while(true)
	{
		if(true == mStandbyState)
		{
			if(mRxQueue.getMessage(msg, true))
			{
				if(msg.mHeader.mEvent == EEvent::EV_REQUEST_RUN)
				{
					std::cout << "[*] Control-Component: Switching from STANDBY to RUNNING" << std::endl;
					mStandbyState = false;
				}
			}
		}
		else
		{
			sleep(1);
			mHardware.fetchValues();
			CSensorData sensorData(time,
					mHardware.getX1__dd_raw(),
					mHardware.getY1__dd_raw(),
					mHardware.getPhi1__d_raw(),
					mHardware.getX2__dd_raw(),
					mHardware.getY2__dd_raw(),
					mHardware.getPhi2__d_raw());
			CMessage sensorMsg(EEvent::EV_REQUEST_TX_DATA,
								EDataType::SENSOR_DATA,
								sensorData);
			time += 1.0F;
			mTxQueue.addMessage(sensorMsg, false);
		}
	}
}
void CControlComponent::V1_AusgleichsPolynomAccelerometer()
{
	CMessage rxMsg;
	Float32 time;

	while(true)
	{
		if(true == mStandbyState)
		{
			if(mRxQueue.getMessage(rxMsg, true))
			{
				if(rxMsg.mHeader.mEvent == EEvent::EV_REQUEST_RUN)
				{
					std::cout << "[*] Control-Component: Switching from STANDBY to RUNNING" << std::endl;
					mStandbyState = false;
					time = 0.0F;
				}
			}
			else
			{
				if(rxMsg.mHeader.mEvent == EEvent::EV_REQUEST_STANDBY)
				{
					std::cout << "[*] Control-Component: Switching from RUNNING to STANDBY" << std::endl;
					mStandbyState = true;
				}
				usleep(20000);
				mHardware.fetchValues();
				CSensorData sensorData(time,
						mHardware.getX1__dd_raw(),
						mHardware.getY1__dd_raw(),
						mHardware.getPhi1__d_raw(),
						mHardware.getX2__dd_raw(),
						mHardware.getY2__dd_raw(),
						mHardware.getPhi2__d_raw());
				CMessage sensorMsg(EEvent::EV_REQUEST_TX_DATA,
									EDataType::SENSOR_DATA,
									sensorData);
				time += 0.02F;
				mTxQueue.addMessage(sensorMsg, false);
			}
		}
	}
}
