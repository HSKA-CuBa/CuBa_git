//7.9.16, Michael Meindl
//Method-Definitions to read out the sensor values
#include "CMPU6050.h"
#include "MPU6050.h"
#include <stddef.h>
#include <stdio.h>
#include <iostream>
#include <iomanip>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <linux/i2c-dev.h>
#include <unistd.h>
#include <stdlib.h> //exit
#include "ELowPass.h"

CMPU6050::CMPU6050(bool AD0PinLevel) : mFile(-1),
									   mAD0Level(AD0PinLevel),
									   mPadding{0U}
{

	mFile = open("/dev/i2c-1", O_RDWR);
	if(mFile < 0)
	{
		std::cerr << "(CMPU6050::CMPU6050()): Failed to open device . . . " << std::endl;
		exit(1);
	}
	if(ioctl(mFile, I2C_SLAVE, mAD0Level ? (MPU6050Register::MPU6050_DEVICE_ADDR+1U) :
											MPU6050Register::MPU6050_DEVICE_ADDR ) < 0)
	{
		std::cerr << "(CMPU6050::CMPU6050()) AD0PinLevel: " << mAD0Level << ". . .  Failed to set Slave-Address . . . " << std::endl;
		exit(1);
	}
	this->writeRegister(MPU6050Register::PWR_MGMT_1, 0U);
	this->writeRegister(MPU6050Register::CONFIG, static_cast<UInt8>(ELowPass::BANDWIDTH_44));
}
CMPU6050::~CMPU6050()
{
	if(close(mFile) < 0)
	{
		std::cerr<<"(CMPU6050::~CMPU6050()) AD0PinLevel: " << mAD0Level << ". . .  Failed to close device . . . " << std::endl;
		exit(1);
	}
}
Int16 CMPU6050::getX__dd_raw()
{
	union
	{
		Int16 x__dd_raw;
		UInt8 rawData[2];
	};
	rawData[0] = this->readRegister(MPU6050::ACCEL_XOUT_L);
	rawData[1] = this->readRegister(MPU6050::ACCEL_XOUT_H);
	return x__dd_raw;
}
Int16 CMPU6050::getY__dd_raw()
{
	union
	{
		Int16 y__dd_raw;
		UInt8 rawData[2];
	};
	rawData[0] = this->readRegister(MPU6050::ACCEL_YOUT_L);
	rawData[1] = this->readRegister(MPU6050::ACCEL_YOUT_H);
	return y__dd_raw;
}
Int16 CMPU6050::getZ__dd_raw()
{
	union
	{
		Int16 z__dd_raw;
		UInt8 rawData[2];
	};
	rawData[0] = this->readRegister(MPU6050::ACCEL_ZOUT_L);
	rawData[0] = this->readRegister(MPU6050::ACCEL_ZOUT_H);
	return z__dd_raw;
}
Int16 CMPU6050::getX_angular__d_raw()
{
	union
	{
		Int16 x_angular__d_raw;
		UInt8 rawData[2];
	};
	rawData[0] = this->readRegister(MPU6050::GYRO_XOUT_L);
	rawData[1] = this->readRegister(MPU6050::GYRO_XOUT_H);
	return x_angular__d_raw;
}
Int16 CMPU6050::getY_angular__d_raw()
{
	union
	{
		Int16 y_angular__d_raw;
		UInt8 rawData[2];
	};
	rawData[0] = this->readRegister(MPU6050::GYRO_YOUT_L);
	rawData[1] = this->readRegister(MPU6050::GYRO_YOUT_H);
	return y_angular__d_raw;
}
Int16 CMPU6050::getZ_angular__d_raw()
{
	union
	{
		Int16 z_angular__d_raw;
		UInt8 rawData[2];
	};
	rawData[0] = this->readRegister(MPU6050::GYRO_ZOUT_L);
	rawData[1] = this->readRegister(MPU6050::GYRO_ZOUT_H);
	return z_angular__d_raw;
}
void CMPU6050::writeRegister(const UInt8 registerAddr, const UInt8 value)
{
	if(i2c_smbus_write_byte_data(mFile, MPU6050::PWR_MGMT_1, 0U) < 0)
	{
		std::cerr << "(CMPU6050::writeRegister()) AD0PinLevel: " << mAD0Level << ". . .  Failed to write register value . . ." << std::endl;
		exit(1);
	}
}
UInt8 CMPU6050::readRegister(const UInt8 registerAddr)
{
	Int32 registerValue = -1;
	if(i2c_smbus_write_byte(mFile, registerAddr) < 0)
	{
		std::cerr << "(CMPU6050::readRegister()) AD0PinLevel: " << mAD0Level << ". . .  Failed to read register value . . . " << std::endl;
		exit(1);
	}
	registerValue = i2c_smbus_read_byte(mFile);
	{
		if(registerValue < 0)
		{
			std::cerr << "(CMPU6050::readRegister()) AD0PinLevel: " << mAD0Level << ". . .  Failed to read register value . .  ." << std::endl;
			exit(1);
		}
	}
	return static_cast<UInt8>(registerValue);
}
