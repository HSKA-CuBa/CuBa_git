#include "CSTMHardware.h"
#include "CSensorEvaluation.h"
#include "CComplementaryFilter.h"
#include "TKalmanFilter.h"
#include "TFloatingMean.h"
#include "CLQR.h"
#include <cmath>

UInt32 tick = 0U;
UInt32 adcTick = 0U;

extern "C"
{
void SysTick_Handler();
void SysTick_Handler()
{
	HAL_IncTick();
	tick++;
	adcTick++;
}
}

void main();
void main()
{
	CSTMHardware hw;
	CSensorEvaluation sensorEval;
	CComplementaryFilter compFilter;
	TKalmanFilter<7U> kalmanFilter;
	TKalmanFilter<7U> phi_d_KalmanFilter;
	CLQR lqr;
	TFloatingMean<4U> psi_d_filter;

	float phi 		= 0.0F;
	float phi_d 	= 0.0F;
	float phi_dd 	= 0.0F;
	float psi_d		= 0.0F;

	while (1)
	{
		//Ueberabtastung des ADC
		if(adcTick >= 5U)
		{

		   psi_d = sensorEval.calcPsi__d(hw.getPsi__d_raw());
		   psi_d = psi_d_filter.calculateValue(psi_d);
		}
	   if(tick >= 20U)
	   {
		   tick = 0U;

		   phi = sensorEval.calcPhi(hw.getX1__dd_raw(),
				   	   	   	   	    hw.getX2__dd_raw(),
									hw.getY1__dd_raw(),
									hw.getY2__dd_raw());
		   phi_d = sensorEval.calcPhi__d(hw.getPhi1__d_raw(),
				   	   	   	   	   	   	 hw.getPhi2__d_raw());
		   phi_dd = sensorEval.getPhi__dd();

		   //phi = compFilter.calculatePhi(phi, phi_d);
		   phi = kalmanFilter.calculatePhi(phi, phi_d);
		   phi_d = phi_d_KalmanFilter.calculatePhi(phi_d, phi_dd);

		   float absPhi = std::abs(phi);
		   if(absPhi < Config::PhiBalanceMax)
		   {
			   hw.enableMotor();
			   hw.setTorque(lqr.controlIteration(phi, phi_d, psi_d));
		   }
		   else
		   {
			   hw.disableMotor();
		   }
	   }
	}
}
