/**
 * @file	CControlFSM.cpp
 * @author	Michael Meindl
 * @date	5.10.2016
 */
#include "CControlFSM.h"
#include "CMessage.h"

bool CControlFSM::onInitial(CMessage& msg)
{
	EEvent event = msg.getEvent();
	if(EEvent::INIT == event)
	{
		mState = sStandby;
		sAction.entryStandby();
		return true;
	}
	return false;
}
bool CControlFSM::onSensorMeasurement(CMessage& msg)
{
	EEvent event = msg.getEvent();
	if(EEvent::EXIT == event)
	{
		sAction.exitSensorMeasurement();
		mState = sInitial;
		return true;
	}
	if(EEvent::TIMER_TICK == event)
	{
		sAction.sampleSensors();
		return true;
	}
	if(EEvent::CLIENT_DISCONNECT == event)
	{
		sAction.exitSensorMeasurement();
		mState = sStandby;
		sAction.entryStandby();
		return true;
	}
	return false;
}
bool CControlFSM::onADCMeasurement(CMessage& msg)
{
	EEvent event = msg.getEvent();
	if(EEvent::EXIT == event)
	{
		sAction.exitADCMeasurement();
		mState = sInitial;
		return true;
	}
	if(EEvent::TIMER_TICK == event)
	{
		sAction.sampleADC();
		return true;
	}
	if(EEvent::CLIENT_DISCONNECT == event)
	{
		sAction.exitADCMeasurement();
		mState = sStandby;
		sAction.entryStandby();
		return true;
	}
	return false;
}
bool CControlFSM::onCPsiIdentification(CMessage& msg)
{
	EEvent event = msg.getEvent();
	if(EEvent::EXIT == event)
	{
		sAction.exitCPsiIdentification();
		mState = sInitial;
		return true;
	}
	if(EEvent::TIMER_TICK == event)
	{
		sAction.sampleCPsiIdentification();
		return true;
	}
	if(EEvent::SET_TORQUE == event)
	{
		sAction.setTorque(msg.getTorque());
		return true;
	}
	if(EEvent::CLIENT_DISCONNECT == event)
	{
		sAction.exitCPsiIdentification();
		mState = sStandby;
		sAction.entryStandby();
		return true;
	}
	return false;
}
bool CControlFSM::onCPhiIdentification(CMessage& msg)
{
	EEvent event = msg.getEvent();
	if(EEvent::EXIT == event)
	{
		sAction.exitCPhiIdentification();
		mState = sInitial;
		return true;
	}
	if(EEvent::TIMER_TICK == event)
	{
		sAction.sampleCPhiIdentification();
		return true;
	}
	if(EEvent::CLIENT_DISCONNECT == event)
	{
		sAction.exitCPhiIdentification();
		mState = sStandby;
		sAction.entryStandby();
		return true;
	}
	return false;
}

