/**
 * @file STimer.cpp
 * @author Michael Meindl
 * @date 24.9.2016
 * @brief Class definitions for the timer class, which is implemented as singleton.
 */
#include "STimer.h"
#include <new>

STimer* STimer::sInstance = nullptr;
CMutex STimer::sAccessMutex(false, true);
/**
 * Static memory to store the singleton instance, prevents the usage of dynamic memory allocation.
 */
static UInt8 sMemory[cMakeAlignmentSize(sizeof(STimer))];
STimer::STimer()
{

}
STimer& STimer::getInstance()
{
	sAccessMutex.take(true);
	if(nullptr == sInstance)
	{
		sInstance = reinterpret_cast<STimer*>(sMemory);
		sInstance = reinterpret_cast<STimer*>(new(sMemory)STimer);
	}
	sAccessMutex.give();
	return *sInstance;
}
void STimer::run()
{
	while(true)
	{
		mRunningSem.take(true);
		mRunningSem.give();
	}
}
