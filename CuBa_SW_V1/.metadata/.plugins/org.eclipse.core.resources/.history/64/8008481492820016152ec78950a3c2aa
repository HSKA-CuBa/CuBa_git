/**
 * @file TQueue.h
 * @author Michael Meindl
 * @date 24.9.2016
 * @brief File containing a template class implementing a queue for communication
 */
#include "Global.h"

class CCountingSemaphore;
class CMessage;

template<const Int32 size>
class TQueue
{
public:
	bool pushBack(CMessage& msg, bool waitForever); 	///! Method to add a message to the back of the queue, returns true on success.
	bool pushFront(CMessage& msg, bool waitForever);	///! Method to add a message to the front of the queue, returns true on success.
	bool popFront(CMessage& msg, bool waitForever);		///! Method to get a message from the front of the que
public:
	TQueue();
	TQueue(const TQueue<size>&) = delete;
	TQueue<size>& operator=(const TQueue<size>&) = delete;
	~TQueue() = default;
private:
	static constexpr Int32 sSize = size;
	CCountingSemaphore mReadSem;
	CCountingSemaphore mWriteSem;
	CMessage mQueue[sSize];
	Int32 mHeadIndex;
	Int32 mTailIndex;
};
