/**
 * @file	CProxy.cpp
 * @author	Michael Meindl
 * @date	28.9.2016
 * @brief	Class definition for the proxy.
 */
#include "CProxy.h"
#include "CMessage.h"
#include "CControlComponent.h"
#include "CCommComponent.h"

bool CProxy::timerTick(bool waitForever)
{
	CMessage msg(EEvent::EV_TIMER_TICK);
	return mControlComp.mQueue.pushBack(msg, waitForever);
}
bool CProxy::transmitSensorData(const CSensorData& data,
								bool waitForever)
{
	CMessage msg(data);
	return mCommComp.mQueue.pushBack(msg, waitForever);
}
bool CProxy::transmitPhi(const CPhi& data,
						 bool waitForever)
{
	CMessage msg(data);
	return mCommComp.mQueue.pushBack(msg, waitForever);
}
bool CProxy::transmitPhi__d(const CPhi__d& data,
							bool waitForever)
{
	CMessage msg(data);
	return mCommComp.mQueue.pushBack(msg, waitForever);
}
bool CProxy::transmitPsi__d(const CPsi__d& data,
							 bool waitForever)
{
	CMessage msg(data);
	return mCommComp.mQueue.pushBack(msg, waitForever);
}
CProxy::CProxy(CCommComponent& commComp,
			   CControlComponent& controlComp) : mCommComp(commComp),
			   	   	   	   	   	   	   	   	     mControlComp(controlComp)
{

}
