/**
 * @file 	SControlComponent.cpp
 * @author	Michael Meindl
 * @date	25.9.2016
 * @brief	Method definitions for SControlComponent.
 */
#include "SControlComponent.h"
#include <new>
#include <iostream>

void SControlComponent::init()
{
	std::cout << "[*] Control-Component: Initializing" << std::endl;
	mProxyPtr = &(SProxy::getInstance());
}
void SControlComponent::run()
{
	std::cout << "[*] Control-Component: Running" << std::endl;
	CMessage rxMsg;
	while(mQueue.popFront(rxMsg, true))
	{
		EEvent event = rxMsg.getEvent();
		if(EEvent::EV_TIMER_TICK == event)
		{
			std::cout << "[*] Control-Component: Sampling intervall" << std::endl;
		}
	}
}

SControlComponent* SControlComponent::sInstance = nullptr;
CMutex SControlComponent::sAccessMutex(true, true);
static UInt8 sMemory[cMakeAlignmentSize(sizeof(SControlComponent))] = {0U};
SControlComponent::SControlComponent() : AComponentBase(),
										 mProxyPtr(nullptr)
{

}
SControlComponent& SControlComponent::getInstance()
{
	sAccessMutex.take(true);
	if(sInstance == nullptr)
	{
		sInstance = reinterpret_cast<SControlComponent*>(new(sMemory)SControlComponent);
	}
	sAccessMutex.give();
	return *sInstance;
}
