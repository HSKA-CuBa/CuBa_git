/**
 * @file STimer.h
 * @author Michael Meindl
 * @date 24.9.2016
 * @brief Class definition of a timer task which is implemented as a singleton.
 */
#ifndef STIMER_H
#define STIMER_H
#include "IRunnable.h"
#include "CMutex.h"
#include "Global.h"

class STimer : public IRunnable
{
public:
	/**
	 * Static method to get the singleton instance.
	 */
	static STimer& getInstance();
	void run() override;
	void init() override;
public:
	STimer(const STimer&) = delete;
	STimer& operator=(const STimer&) = delete;
	~STimer();
private:
	STimer();
private:
	static STimer* sInstance;
	/**
	 * Static memory to
	 */
	static UInt8 sMemory[cMakeAlignmentSize(sizeof(STimer))];
};

#endif
