//11.9.2016, Michael Meindl
#include "CServer.h"
#include <unistd.h>		//close()
#include <strings.h>	//bzero()
#include <iostream>
#include <errno.h>

extern int errno;

bool CServer::receiveMessage(Float32& msg, bool waitForever)
{
	bool success = false;
	Int32 retVal = -1;
	ssize_t bytesReceived = 0;

	do
	{
		retVal = recv(mConnectedSocketFD, &msg, sizeof(msg)-bytesReceived, MSG_DONTWAIT);
		if(false == (errno == EWOULDBLOCK || errno == EAGAIN))
		{
			sAssertion(retVal >= 0, "(CServer::receiveMessage()): Failed to read from the socket", true);
		}

		if((retVal == 0) && (waitForever == false))
		{
			//No bytes available and caller does not want to wait forever
			break;
		}
		else
		{
			bytesReceived += retVal;
		}
	}while(bytesReceived < sizeof(msg));

	if(bytesReceived == sizeof(msg))
	{
		success = true;
	}
	return success;
}
bool CServer::transmitMessage(const CMessage& msg)
{
	bool success = false;
	Int32 retVal = -1;
	ssize_t writtenByte = 0;
	const UInt8* buffer = reinterpret_cast<const UInt8*>(&msg);
	union
	{
		UInt8 raw[20];
		CMessage testMsg{};
	};
	testMsg = msg;
	do
	{
		retVal = send(mConnectedSocketFD, (buffer+writtenByte), (20 - writtenByte), MSG_NOSIGNAL);
		if(errno == EPIPE)
		{
			std::cout << "[*] Comm-Component: Connection was shutdown by client" << std::endl;
			success = false;
			break;
		}
		else
		{
			//Check for different errors
			sAssertion(retVal >= 0, "(CServer::transmitMessage()): Failed to send data.");
		}
		success = true;
		writtenByte += retVal;
	}while(writtenByte < 20);
	return success;
}
void CServer::init()
{
	mSocketFD = socket(AF_INET, SOCK_STREAM, 0);
	sAssertion(mSocketFD >= 0, "(CServer::CServer()): Failed to open socket.");

	//Biund the socket to an address
	struct sockaddr_in server_addr;
	bzero(reinterpret_cast<Int8*>(&server_addr), sizeof(server_addr));
	server_addr.sin_family		= AF_INET;
	server_addr.sin_port		= htons(sPort);
	server_addr.sin_addr.s_addr = INADDR_ANY;		//Host-Addr aka this machins addr
	Int32 retVal = bind(mSocketFD,
						reinterpret_cast<struct sockaddr*>(&server_addr),
						sizeof(server_addr));
	sAssertion(retVal >= 0, "(CServer::CServer()): Failed to bind the socket.");

	retVal = listen(mSocketFD, 1);
	sAssertion(retVal >= 0, "(CServer::CServer()): Failed to listen().");
}
void CServer::waitForClient()
{
	mConnectedSocketFD = accept(mSocketFD,
					   	   	    reinterpret_cast<struct sockaddr*>(&mClientAddr),
								&mClientLen);
	sAssertion(mConnectedSocketFD >= 0, "(CServer::CServer()): Failed to accept the client connection.");
}
CServer::CServer() : mSocketFD(-1),
					 mConnectedSocketFD(-1)
{

}
CServer::~CServer()
{
	Int32 retVal = shutdown(mConnectedSocketFD, SHUT_RDWR);
	sAssertion(retVal >= 0, "(CServer::~CServer()): Failed to shutdown socket.");

	retVal = close(mConnectedSocketFD);
	sAssertion(retVal >= 0, "(CServer::~CServer()): Failed to close connected socket.");

	retVal = close(mSocketFD);
	sAssertion(retVal >= 0, "(CServer::~CServer()): Failed to close socket.");
}
